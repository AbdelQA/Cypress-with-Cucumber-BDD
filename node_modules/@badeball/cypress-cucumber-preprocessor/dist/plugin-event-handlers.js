"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStringAttachmentHandler = exports.testCaseFinishedHandler = exports.testStepFinishedHandler = exports.testStepStartedHandler = exports.testCaseStartedHandler = exports.specEnvelopesHandler = exports.afterScreenshotHandler = exports.afterSpecHandler = exports.beforeSpecHandler = exports.afterRunHandler = exports.beforeRunHandler = void 0;
const fs_1 = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const stream_1 = __importDefault(require("stream"));
const events_1 = require("events");
const chalk_1 = __importDefault(require("chalk"));
const cucumber_1 = require("@cucumber/cucumber");
const message_streams_1 = require("@cucumber/message-streams");
const html_formatter_1 = __importDefault(require("@cucumber/html-formatter"));
const constants_1 = require("./constants");
const preprocessor_configuration_1 = require("./preprocessor-configuration");
const paths_1 = require("./helpers/paths");
const messages_1 = require("./helpers/messages");
const type_guards_1 = require("./helpers/type-guards");
const memoize_1 = require("./helpers/memoize");
const debug_1 = __importDefault(require("./helpers/debug"));
const error_1 = require("./helpers/error");
const resolve = (0, memoize_1.memoize)(preprocessor_configuration_1.resolve);
let state = {
    state: "initial",
};
async function beforeRunHandler(config) {
    (0, debug_1.default)("beforeRunHandler()");
    if (!config.isTextTerminal) {
        return;
    }
    const preprocessor = await resolve(config, config.env, "/");
    if (!preprocessor.messages.enabled) {
        return;
    }
    const messagesPath = (0, paths_1.ensureIsAbsolute)(config.projectRoot, preprocessor.messages.output);
    await fs_1.promises.rm(messagesPath, { force: true });
    const testRunStarted = {
        testRunStarted: {
            timestamp: (0, messages_1.createTimestamp)(),
        },
    };
    await fs_1.promises.mkdir(path_1.default.dirname(messagesPath), { recursive: true });
    await fs_1.promises.writeFile(messagesPath, JSON.stringify(testRunStarted) + "\n");
}
exports.beforeRunHandler = beforeRunHandler;
async function afterRunHandler(config) {
    (0, debug_1.default)("afterRunHandler()");
    if (!config.isTextTerminal) {
        return;
    }
    const preprocessor = await resolve(config, config.env, "/");
    if (!preprocessor.messages.enabled &&
        !preprocessor.json.enabled &&
        !preprocessor.html.enabled) {
        return;
    }
    const messagesPath = (0, paths_1.ensureIsAbsolute)(config.projectRoot, preprocessor.messages.output);
    try {
        await fs_1.promises.access(messagesPath, fs_1.constants.F_OK);
    }
    catch (_a) {
        return;
    }
    if (preprocessor.messages.enabled) {
        const testRunFinished = {
            testRunFinished: {
                /**
                 * We're missing a "success" attribute here, but cucumber-js doesn't output it, so I won't.
                 * Mostly because I don't want to look into the semantics of it right now.
                 */
                timestamp: (0, messages_1.createTimestamp)(),
            },
        };
        await fs_1.promises.writeFile(messagesPath, JSON.stringify(testRunFinished) + "\n", {
            flag: "a",
        });
    }
    if (preprocessor.json.enabled) {
        const jsonPath = (0, paths_1.ensureIsAbsolute)(config.projectRoot, preprocessor.json.output);
        await fs_1.promises.mkdir(path_1.default.dirname(jsonPath), { recursive: true });
        const messages = (await fs_1.promises.readFile(messagesPath))
            .toString()
            .trim()
            .split("\n")
            .map((line) => JSON.parse(line));
        let jsonOutput;
        const log = (output) => {
            if (typeof output !== "string") {
                throw (0, error_1.createError)("Expected a JSON output of string, but got " + typeof output);
            }
            else {
                jsonOutput = output;
            }
        };
        const eventBroadcaster = new events_1.EventEmitter();
        const eventDataCollector = new cucumber_1.formatterHelpers.EventDataCollector(eventBroadcaster);
        const stepDefinitions = messages
            .map((m) => m.stepDefinition)
            .filter(type_guards_1.notNull)
            .map((s) => {
            return {
                id: s.id,
                uri: "not available",
                line: 0,
            };
        });
        new cucumber_1.JsonFormatter({
            eventBroadcaster,
            eventDataCollector,
            log,
            supportCodeLibrary: {
                stepDefinitions,
            },
            colorFns: null,
            cwd: null,
            parsedArgvOptions: {},
            snippetBuilder: null,
            stream: null,
            cleanup: null,
        });
        for (const message of messages) {
            eventBroadcaster.emit("envelope", message);
        }
        if (typeof jsonOutput !== "string") {
            throw (0, error_1.createError)("Expected JSON formatter to have finished, but it never returned");
        }
        await fs_1.promises.writeFile(jsonPath, jsonOutput);
    }
    if (preprocessor.html.enabled) {
        const htmlPath = (0, paths_1.ensureIsAbsolute)(config.projectRoot, preprocessor.html.output);
        await fs_1.promises.mkdir(path_1.default.dirname(htmlPath), { recursive: true });
        const input = fs_1.default.createReadStream(messagesPath);
        const output = fs_1.default.createWriteStream(htmlPath);
        await new Promise((resolve, reject) => {
            stream_1.default.pipeline(input, new message_streams_1.NdjsonToMessageStream(), new html_formatter_1.default(require.resolve("@cucumber/html-formatter/dist/main.css", {
                paths: [__dirname],
            }), require.resolve("@cucumber/html-formatter/dist/main.js", {
                paths: [__dirname],
            })), output, (err) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
}
exports.afterRunHandler = afterRunHandler;
async function beforeSpecHandler(config) {
    (0, debug_1.default)("beforeSpecHandler()");
    if (!config.isTextTerminal) {
        return;
    }
    const preprocessor = await resolve(config, config.env, "/");
    if (!preprocessor.messages.enabled) {
        return;
    }
    switch (state.state) {
        case "initial":
        case "after-spec":
            state = {
                state: "before-spec",
            };
            break;
        // This happens in case of visting a new domain, ref. https://github.com/cypress-io/cypress/issues/26300.
        // In this case, we want to disgard messages obtained in the current test and allow execution to continue
        // as if nothing happened.
        case "step-started":
            break;
        default:
            throw (0, error_1.createError)("Unexpected state in beforeSpecHandler: " + state.state);
    }
}
exports.beforeSpecHandler = beforeSpecHandler;
async function afterSpecHandler(config, spec, results) {
    (0, debug_1.default)("afterSpecHandler()");
    if (!config.isTextTerminal) {
        return;
    }
    const preprocessor = await resolve(config, config.env, "/");
    const messagesPath = (0, paths_1.ensureIsAbsolute)(config.projectRoot, preprocessor.messages.output);
    // `results` is undefined when running via `cypress open`.
    if (preprocessor.messages.enabled && results) {
        const wasRemainingSkipped = results.tests.some((test) => { var _a; return (_a = test.displayError) === null || _a === void 0 ? void 0 : _a.match(constants_1.HOOK_FAILURE_EXPR); });
        if (wasRemainingSkipped) {
            console.log(chalk_1.default.yellow(`  Hook failures can't be represented in messages / JSON reports, thus none is created for ${spec.relative}.`));
        }
        else if ("messages" in state) {
            await fs_1.promises.writeFile(messagesPath, state.messages.map((message) => JSON.stringify(message)).join("\n") +
                "\n", {
                flag: "a",
            });
        }
    }
    state = {
        state: "after-spec",
    };
}
exports.afterSpecHandler = afterSpecHandler;
async function afterScreenshotHandler(config, details) {
    (0, debug_1.default)("afterScreenshotHandler()");
    if (!config.isTextTerminal) {
        return details;
    }
    const preprocessor = await resolve(config, config.env, "/");
    if (!preprocessor.messages.enabled) {
        return details;
    }
    switch (state.state) {
        case "step-started":
            break;
        default:
            return details;
    }
    let buffer;
    try {
        buffer = await fs_1.promises.readFile(details.path);
    }
    catch (_a) {
        return details;
    }
    const message = {
        attachment: {
            testCaseStartedId: state.testCaseStartedId,
            testStepId: state.testStepStartedId,
            body: buffer.toString("base64"),
            mediaType: "image/png",
            contentEncoding: "BASE64",
        },
    };
    state.messages.push(message);
    return details;
}
exports.afterScreenshotHandler = afterScreenshotHandler;
function specEnvelopesHandler(config, data) {
    (0, debug_1.default)("specEnvelopesHandler()");
    if (!config.isTextTerminal) {
        return true;
    }
    switch (state.state) {
        case "before-spec":
            break;
        // This happens in case of visting a new domain, ref. https://github.com/cypress-io/cypress/issues/26300.
        // In this case, we want to disgard messages obtained in the current test and allow execution to continue
        // as if nothing happened.
        case "step-started":
            {
                const iTestCaseStarted = state.messages.findLastIndex((message) => !!message.testCaseStarted);
                if (iTestCaseStarted === -1) {
                    throw (0, error_1.createError)("Expected to find a testCaseStarted envelope");
                }
                state = {
                    state: "received-envelopes",
                    messages: state.messages.slice(0, iTestCaseStarted),
                };
            }
            return true;
        default:
            throw (0, error_1.createError)("Unexpected state in specEnvelopesHandler: " + state.state);
    }
    state = {
        state: "received-envelopes",
        messages: data.messages,
    };
    return true;
}
exports.specEnvelopesHandler = specEnvelopesHandler;
function testCaseStartedHandler(config, data) {
    (0, debug_1.default)("testCaseStartedHandler()");
    if (!config.isTextTerminal) {
        return true;
    }
    switch (state.state) {
        case "received-envelopes":
        case "test-finished":
            break;
        default:
            throw (0, error_1.createError)("Unexpected state in testCaseStartedHandler: " + state.state);
    }
    state = {
        state: "test-started",
        messages: state.messages.concat({ testCaseStarted: data }),
        testCaseStartedId: data.id,
    };
    return true;
}
exports.testCaseStartedHandler = testCaseStartedHandler;
function testStepStartedHandler(config, data) {
    (0, debug_1.default)("testStepStartedHandler()");
    if (!config.isTextTerminal) {
        return true;
    }
    switch (state.state) {
        case "test-started":
        case "step-finished":
            break;
        // This state can happen in cases where an error is "rescued".
        case "step-started":
            break;
        default:
            throw (0, error_1.createError)("Unexpected state in testStepStartedHandler: " + state.state);
    }
    state = {
        state: "step-started",
        messages: state.messages.concat({ testStepStarted: data }),
        testCaseStartedId: state.testCaseStartedId,
        testStepStartedId: data.testStepId,
    };
    return true;
}
exports.testStepStartedHandler = testStepStartedHandler;
function testStepFinishedHandler(config, data) {
    (0, debug_1.default)("testStepFinishedHandler()");
    if (!config.isTextTerminal) {
        return true;
    }
    switch (state.state) {
        case "step-started":
            break;
        default:
            throw (0, error_1.createError)("Unexpected state in testStepFinishedHandler: " + state.state);
    }
    state = {
        state: "step-finished",
        messages: state.messages.concat({ testStepFinished: data }),
        testCaseStartedId: state.testCaseStartedId,
    };
    return true;
}
exports.testStepFinishedHandler = testStepFinishedHandler;
function testCaseFinishedHandler(config, data) {
    (0, debug_1.default)("testCaseFinishedHandler()");
    if (!config.isTextTerminal) {
        return true;
    }
    switch (state.state) {
        case "test-started":
        case "step-finished":
            break;
        default:
            throw (0, error_1.createError)("Unexpected state in testCaseFinishedHandler: " + state.state);
    }
    state = {
        state: "test-finished",
        messages: state.messages.concat({ testCaseFinished: data }),
    };
    return true;
}
exports.testCaseFinishedHandler = testCaseFinishedHandler;
async function createStringAttachmentHandler(config, { data, mediaType, encoding }) {
    (0, debug_1.default)("createStringAttachmentHandler()");
    if (!config.isTextTerminal) {
        return true;
    }
    const preprocessor = await resolve(config, config.env, "/");
    if (!preprocessor.messages.enabled) {
        return true;
    }
    switch (state.state) {
        case "step-started":
            break;
        default:
            throw (0, error_1.createError)("Unexpected state in createStringAttachmentHandler: " + state.state);
    }
    const message = {
        attachment: {
            testCaseStartedId: state.testCaseStartedId,
            testStepId: state.testStepStartedId,
            body: data,
            mediaType: mediaType,
            contentEncoding: encoding,
        },
    };
    state.messages.push(message);
    return true;
}
exports.createStringAttachmentHandler = createStringAttachmentHandler;
